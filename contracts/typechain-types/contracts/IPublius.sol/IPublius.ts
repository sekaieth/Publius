/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IPubliusInterface extends utils.Interface {
  functions: {
    "addChapter(uint256,string,string,uint256,string[],string[],uint256[])": FunctionFragment;
    "addPage(uint256,string,string,uint256)": FunctionFragment;
    "addSection(bytes,bytes,bytes)": FunctionFragment;
    "chapters(uint256)": FunctionFragment;
    "costToMint()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "minterOwnedTokens(address)": FunctionFragment;
    "modifyChapter(uint256,string,string)": FunctionFragment;
    "modifyPage(uint256,uint256,string,string)": FunctionFragment;
    "modifySection(uint256,string,string)": FunctionFragment;
    "publicationAuthor()": FunctionFragment;
    "publicationAuthorName()": FunctionFragment;
    "publicationCoverImage()": FunctionFragment;
    "publicationName()": FunctionFragment;
    "sectionCount()": FunctionFragment;
    "sections(uint256)": FunctionFragment;
    "tokenIdToMinter(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addChapter"
      | "addPage"
      | "addSection"
      | "chapters"
      | "costToMint"
      | "mint"
      | "minterOwnedTokens"
      | "modifyChapter"
      | "modifyPage"
      | "modifySection"
      | "publicationAuthor"
      | "publicationAuthorName"
      | "publicationCoverImage"
      | "publicationName"
      | "sectionCount"
      | "sections"
      | "tokenIdToMinter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChapter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSection",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chapters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "costToMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minterOwnedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyChapter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifySection",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publicationAuthor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicationAuthorName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicationCoverImage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicationName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sectionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sections",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToMinter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addChapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chapters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "costToMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minterOwnedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modifyPage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifySection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationAuthorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationCoverImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sectionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToMinter",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPublius extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPubliusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChapter(
      _sectionId: PromiseOrValue<BigNumberish>,
      _chapterName: PromiseOrValue<string>,
      _chapterImage: PromiseOrValue<string>,
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageNames: PromiseOrValue<string>[],
      _pageContent: PromiseOrValue<string>[],
      _pageIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPage(
      _chapter: PromiseOrValue<BigNumberish>,
      _pageName: PromiseOrValue<string>,
      _pageContent: PromiseOrValue<string>,
      _pageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSection(
      _sectionInfo: PromiseOrValue<BytesLike>,
      _chapterInfo: PromiseOrValue<BytesLike>,
      _pageInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chapters(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    costToMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minterOwnedTokens(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    modifyChapter(
      _chapterId: PromiseOrValue<BigNumberish>,
      _newChapterName: PromiseOrValue<string>,
      _newChapterImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyPage(
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageId: PromiseOrValue<BigNumberish>,
      _newPageName: PromiseOrValue<string>,
      _newPageContent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifySection(
      _sectionId: PromiseOrValue<BigNumberish>,
      _newSectionName: PromiseOrValue<string>,
      _newSectionImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publicationAuthor(overrides?: CallOverrides): Promise<[string]>;

    publicationAuthorName(overrides?: CallOverrides): Promise<[string]>;

    publicationCoverImage(overrides?: CallOverrides): Promise<[string]>;

    publicationName(overrides?: CallOverrides): Promise<[string]>;

    sectionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sections(
      sectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    tokenIdToMinter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addChapter(
    _sectionId: PromiseOrValue<BigNumberish>,
    _chapterName: PromiseOrValue<string>,
    _chapterImage: PromiseOrValue<string>,
    _chapterId: PromiseOrValue<BigNumberish>,
    _pageNames: PromiseOrValue<string>[],
    _pageContent: PromiseOrValue<string>[],
    _pageIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPage(
    _chapter: PromiseOrValue<BigNumberish>,
    _pageName: PromiseOrValue<string>,
    _pageContent: PromiseOrValue<string>,
    _pageId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSection(
    _sectionInfo: PromiseOrValue<BytesLike>,
    _chapterInfo: PromiseOrValue<BytesLike>,
    _pageInfo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chapters(
    chapterId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, BigNumber[]]>;

  costToMint(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minterOwnedTokens(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  modifyChapter(
    _chapterId: PromiseOrValue<BigNumberish>,
    _newChapterName: PromiseOrValue<string>,
    _newChapterImage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyPage(
    _chapterId: PromiseOrValue<BigNumberish>,
    _pageId: PromiseOrValue<BigNumberish>,
    _newPageName: PromiseOrValue<string>,
    _newPageContent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifySection(
    _sectionId: PromiseOrValue<BigNumberish>,
    _newSectionName: PromiseOrValue<string>,
    _newSectionImage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publicationAuthor(overrides?: CallOverrides): Promise<string>;

  publicationAuthorName(overrides?: CallOverrides): Promise<string>;

  publicationCoverImage(overrides?: CallOverrides): Promise<string>;

  publicationName(overrides?: CallOverrides): Promise<string>;

  sectionCount(overrides?: CallOverrides): Promise<BigNumber>;

  sections(
    sectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, BigNumber[]]>;

  tokenIdToMinter(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addChapter(
      _sectionId: PromiseOrValue<BigNumberish>,
      _chapterName: PromiseOrValue<string>,
      _chapterImage: PromiseOrValue<string>,
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageNames: PromiseOrValue<string>[],
      _pageContent: PromiseOrValue<string>[],
      _pageIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPage(
      _chapter: PromiseOrValue<BigNumberish>,
      _pageName: PromiseOrValue<string>,
      _pageContent: PromiseOrValue<string>,
      _pageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSection(
      _sectionInfo: PromiseOrValue<BytesLike>,
      _chapterInfo: PromiseOrValue<BytesLike>,
      _pageInfo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    chapters(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    costToMint(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minterOwnedTokens(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    modifyChapter(
      _chapterId: PromiseOrValue<BigNumberish>,
      _newChapterName: PromiseOrValue<string>,
      _newChapterImage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPage(
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageId: PromiseOrValue<BigNumberish>,
      _newPageName: PromiseOrValue<string>,
      _newPageContent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifySection(
      _sectionId: PromiseOrValue<BigNumberish>,
      _newSectionName: PromiseOrValue<string>,
      _newSectionImage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    publicationAuthor(overrides?: CallOverrides): Promise<string>;

    publicationAuthorName(overrides?: CallOverrides): Promise<string>;

    publicationCoverImage(overrides?: CallOverrides): Promise<string>;

    publicationName(overrides?: CallOverrides): Promise<string>;

    sectionCount(overrides?: CallOverrides): Promise<BigNumber>;

    sections(
      sectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    tokenIdToMinter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addChapter(
      _sectionId: PromiseOrValue<BigNumberish>,
      _chapterName: PromiseOrValue<string>,
      _chapterImage: PromiseOrValue<string>,
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageNames: PromiseOrValue<string>[],
      _pageContent: PromiseOrValue<string>[],
      _pageIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPage(
      _chapter: PromiseOrValue<BigNumberish>,
      _pageName: PromiseOrValue<string>,
      _pageContent: PromiseOrValue<string>,
      _pageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSection(
      _sectionInfo: PromiseOrValue<BytesLike>,
      _chapterInfo: PromiseOrValue<BytesLike>,
      _pageInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chapters(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    costToMint(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minterOwnedTokens(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyChapter(
      _chapterId: PromiseOrValue<BigNumberish>,
      _newChapterName: PromiseOrValue<string>,
      _newChapterImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyPage(
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageId: PromiseOrValue<BigNumberish>,
      _newPageName: PromiseOrValue<string>,
      _newPageContent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifySection(
      _sectionId: PromiseOrValue<BigNumberish>,
      _newSectionName: PromiseOrValue<string>,
      _newSectionImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publicationAuthor(overrides?: CallOverrides): Promise<BigNumber>;

    publicationAuthorName(overrides?: CallOverrides): Promise<BigNumber>;

    publicationCoverImage(overrides?: CallOverrides): Promise<BigNumber>;

    publicationName(overrides?: CallOverrides): Promise<BigNumber>;

    sectionCount(overrides?: CallOverrides): Promise<BigNumber>;

    sections(
      sectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToMinter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChapter(
      _sectionId: PromiseOrValue<BigNumberish>,
      _chapterName: PromiseOrValue<string>,
      _chapterImage: PromiseOrValue<string>,
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageNames: PromiseOrValue<string>[],
      _pageContent: PromiseOrValue<string>[],
      _pageIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPage(
      _chapter: PromiseOrValue<BigNumberish>,
      _pageName: PromiseOrValue<string>,
      _pageContent: PromiseOrValue<string>,
      _pageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSection(
      _sectionInfo: PromiseOrValue<BytesLike>,
      _chapterInfo: PromiseOrValue<BytesLike>,
      _pageInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chapters(
      chapterId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    costToMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minterOwnedTokens(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyChapter(
      _chapterId: PromiseOrValue<BigNumberish>,
      _newChapterName: PromiseOrValue<string>,
      _newChapterImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyPage(
      _chapterId: PromiseOrValue<BigNumberish>,
      _pageId: PromiseOrValue<BigNumberish>,
      _newPageName: PromiseOrValue<string>,
      _newPageContent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifySection(
      _sectionId: PromiseOrValue<BigNumberish>,
      _newSectionName: PromiseOrValue<string>,
      _newSectionImage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publicationAuthor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicationAuthorName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationCoverImage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sectionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sections(
      sectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToMinter(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
